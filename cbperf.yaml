apiVersion: v1
kind: ServiceAccount
metadata:
  name: cbperf-sa
---
kind: SecurityContextConstraints
apiVersion: v1
metadata:
  name: cbperf-scc
allowPrivilegedContainer: true
runAsUser:
  type: RunAsAny
seLinuxContext:
  type: RunAsAny
fsGroup:
  type: RunAsAny
supplementalGroups:
  type: RunAsAny
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: cbperf
rules:
  - apiGroups: ["security.openshift.io"]
    resources: ["securitycontextconstraints"]
    resourceNames: ["cbperf-scc"]
    verbs: ["use"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: cbperf
subjects:
  - kind: ServiceAccount
    name: cbperf-sa
roleRef:
  kind: Role
  name: cbperf
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cbperf-pv-claim
  namespace: cbdemo
spec:
  storageClassName: trident-ontap-nas
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cbperf
  namespace: cbdemo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cbperf
  strategy:
    type: RollingUpdate
    rollingUpdate:
       maxUnavailable: 25%
       maxSurge: 1
  template:
    metadata:
      labels:
        app: cbperf
    spec:
      serviceAccountName: cbperf-sa
      containers:
      - name: cbperf-container
        image: mminichino/cbperf:latest
        imagePullPolicy: Always
        command: ["/bench/bin/persist.sh"]
        securityContext:
          allowPrivilegeEscalation: true
          runAsUser: 1001
        volumeMounts:
        - name: data
          mountPath: /data
          readOnly: false
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: cbperf-pv-claim
